// ====================================================================
// Copyright Yann COLLETTE 2009-2011
// This file is released into the public domain
// ====================================================================

mprintf("Start SciSymphony\n");

if isdef("scisymphonylib") then
	warning("SciSymphony module is already loaded");
	return;
end

etc_tlbx  = get_absolute_file_path("scisymphony.start");
etc_tlbx  = getshortpathname(etc_tlbx);
root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

//Load  functions library
// =============================================================================
mprintf("\tLoad macros\n");
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
scicoinorlib = lib(pathmacros);
clear pathmacros;

// load gateways
// =============================================================================
mprintf("\tLoad gateways\n");
ilib_verbose(0);
exec(pathconvert(root_tlbx + filesep() + "sci_gateway" + filesep() + "loader_gateway.sce",%f));

// Load and add help chapter
// =============================================================================
if or(getscilabmode() == ["NW";"STD"]) then
	mprintf("\tLoad help\n");
	path_addchapter = pathconvert(root_tlbx + filesep() + "jar");
	if ( isdir(path_addchapter) <> [] ) then
		add_help_chapter("SciSymphony", path_addchapter, %F);
		clear add_help_chapter;
	end
	clear path_addchapter;
end

// Load demos
// =============================================================================
if or(getscilabmode() == ["NW";"STD"]) then
	mprintf("\tLoad demos\n");
	pathdemos = pathconvert(root_tlbx + filesep() + "demos" + filesep() + "scisymphony.dem.gateway.sce",%F,%T);
	add_demo("SciSymphony",pathdemos);
	clear pathdemos add_demo;
end

clear root_tlbx;
clear etc_tlbx;
