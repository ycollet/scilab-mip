<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="neigh_func_tsp_2opt"
          xml:lang="en" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate: 01-03-2009 $</pubdate>
  </info>

  <refnamediv>
    <refname>neigh_func_tsp_2opt</refname>

    <refpurpose>implement the 2-opt neighborhood for the simulated
    annealing.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Séquence d'appel</title>

    <synopsis>x_neigh = neigh_func_tsp_2opt(x_current,T,param)</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Paramètres</title>

    <variablelist>
      <varlistentry>
        <term>x_current</term>

        <listitem>
          <para>the current town ordering</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>T</term>

        <listitem>
          <para>the current temperature of the simulated annealing</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>param</term>

        <listitem>
          <para>a list of parameters sent to the simulated annealing (a
          plist)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>x_neigh</term>

        <listitem>
          <para>the neighbor town ordering</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>This function implements the 2-opt neighbor operator.</para>
  </refsection>

  <refsection>
    <title>Exemples</title>

    <programlisting role="example">filenames = ['ch130.tsp','ch130.opt.tour'];

Proba_start = 0.8;
It_intern   = 1000;
It_extern   = 30;
It_Pre      = 100;
It_Scramble = 1000;

//////////////////////////////////////////

[TSP_Cycle,TSPSize,TSPComment]  = read_tsp('../tours/'+filenames(1));
TSP0   = init_tsp_var(TSP_Cycle);
TSPMat = compute_tsp_dist(TSP_Cycle,%F);
TSP0   = scramble_tsp(TSP0,It_Scramble);

deff('y=f(x)','y=compute_tsp_fobj(TSPMat,x)');

/////////////////////////
// Simulated Annealing //
/////////////////////////

printf('SA: geometrical decrease temperature law\n');

sa_params = init_param();
sa_params = add_param(sa_params,'accept_func', accept_func_default); // Optional
sa_params = add_param(sa_params,'temp_law', temp_law_default); // Optional
sa_params = add_param(sa_params,'neigh_func', neigh_func_tsp_2opt);
sa_params = add_param(sa_params,'alpha', 0.8);

T0 = compute_initial_temp(TSP0, f, Proba_start, It_Pre, sa_params);
printf('Initial temperature T0 = %f\n', T0);

[tsp_opt, f_opt, sa_mean_list, sa_var_list, temp_list] = optim_sa(TSP0, f, It_extern, It_intern, T0, Log = %T, sa_params);

plot_tsp(TSP_Cycle,TSP0,'Initial cycle');
plot_tsp(TSP_Cycle,tsp_opt,'Final cycle');

printf('value of the objective function for the initial cycle = %f\n', compute_tsp_fobj(TSPMat,TSP0));
printf('value of the objective function for the final cycle = %f\n', f_opt);
</programlisting>
  </refsection>

  <refsection>
    <title>Voir aussi</title>

    <simplelist type="inline">
      <member><link
      linkend="compute_tsp_fobj">compute_tsp_fobj</link></member>

      <member><link linkend="plot_tsp">plot_tsp</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Auteurs</title>

    <simplelist type="vert">
      <member>Y. Collette (ycollet@freesurf.fr)</member>
    </simplelist>
  </refsection>
</refentry>
