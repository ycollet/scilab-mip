<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="fann_traindata_from_mat"
          xml:lang="en" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <refnamediv>
    <refname>fann_traindata_from_mat</refname>

    <refpurpose>Build a training data set from matrixes.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>ann_data = fann_traindata_from_mat(xData_learn,fData_learn);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>xData_learn</term>

        <listitem>
          <para>a matrix of input values (size nb_points x nb_inputs)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>fData_learn</term>

        <listitem>
          <para>a matrix of output values (size nb_points x nb_outputs)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ann_data</term>

        <listitem>
          <para>the structure handling the training data set</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>Build a training data set from matrixes.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example"><![CDATA[ 
NbPointsLearn = 1000;
NbPointsValid = 100;
desired_error = 1e-6;
max_epochs    = 5000;

Xmax = [2 2];
Xmin = [-2 -2];

// Generate the learning data set
for i=1:NbPointsLearn
  xData_learn(i,:) = (Xmax - Xmin).*rand(size(Xmax,1),size(Xmax,2)) + Xmin;
  fData_learn(i) = sum(xData_learn(i,:).^2);
end

// Normalisation of the learning data set
x_min_norm = min(xData_learn,'r');
x_max_norm = max(xData_learn,'r');
f_min_norm = min(fData_learn,'r');
f_max_norm = max(fData_learn,'r');

// Now we normalize so as the data spread between -1 and 1.
for i=1:NbPointsLearn
  xData_learn(i,:) = 2 * (xData_learn(i,:) - x_min_norm) ./ (x_max_norm - x_min_norm) - 1;
  fData_learn(i)   = 2 * (fData_learn(i)   - f_min_norm)  / (f_max_norm - f_min_norm) - 1;
end

ann = fann_create('sparse',[2 2 1], 0.8);

ann_training_data = fann_traindata_from_mat(xData_learn, fData_learn);
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="fann_create">fann_create</link></member>
      <member><link linkend="fann_setup_train_data">fann_setup_train_data</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <simplelist type="vert">
      <member>Yann COLLETTE</member>
    </simplelist>
  </refsection>
</refentry>
