<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="fann_casc_train_on_data"
          xml:lang="en" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <refnamediv>
    <refname>fann_casc_train_on_data</refname>

    <refpurpose>Trains on an entire dataset, for a period of time using the
    Cascade2 training algorithm.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>ann_out = fann_casc_train_on_data(ann_in,ann_data,nb_neurons,desired_error);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>ann_in</term>

        <listitem>
          <para>a neural network structure</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ann_data</term>

        <listitem>
          <para>a structure containing a set of training data</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>nb_neurons</term>

        <listitem>
          <para>the number of neurons of the initial structure</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>desired_error</term>

        <listitem>
          <para>the desired level of error to reach at the end of the training
          phase. The training algorithm stops when this level is
          reached.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>Trains on an entire dataset, for a period of time using the Cascade2
    training algorithm.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example"><![CDATA[ 
path = get_absolute_file_path('train_on_data.sce');

filename = path + 'data/abelone.train';

max_epochs      = 1000;
desired_error   = 1e-5;
cascade_neurons = 100;

ann_train_data  = fann_readtrain_from_file(filename);

num_input  = fann_setup_train_data(ann_train_data,'num_input_train_data');
num_output = fann_setup_train_data(ann_train_data,'num_output_train_data');

ann = fann_create('shortcut',[num_input num_output]);
ann = fann_reset_MSE(ann);
ann = fann_init_weights(ann, ann_train_data);

ann = fann_setup_train_data(ann_train_data,'set_input_scaling_params',ann,-1,1);
ann = fann_setup_train_data(ann_train_data,'set_output_scaling_params',ann,-1,1);
  
ann = fann_casc_train_on_data(ann,ann_train_data,cascade_neurons,desired_error);

ann = fann_setup_train_data(ann_train_data,'clear_scaling_params',ann);

ann = fann_test_data(ann, ann_train_data);
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="fann_create">fann_create</link></member>
      <member><link linkend="fann_setup_train_data">fann_setup_train_data</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <simplelist type="vert">
      <member>Yann COLLETTE</member>
    </simplelist>
  </refsection>
</refentry>
