// This file is released under the 3-clause BSD license. See COPYING-BSD.
// Generated by builder.sce : Please, do not edit this file
// ----------------------------------------------------------------------------
//
sdp_path = get_absolute_file_path('loader.sce');
//
// ulink previous function with same name
[bOK, ilib] = c_link('sdp');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('triu');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('store_packed');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('store_unpacked');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('alloc_mat_packed');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('free_mat_packed');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('structnnz');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('actnnz');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('bandwidth');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('qreig');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('sort_entries');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('norm2');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('norm1');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('norminf');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('Fnorm');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('Knorm');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat1norm');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('matinfnorm');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('calc_pobj');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('calc_dobj');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('trace_prod');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('linesearch');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('pinfeas');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('dinfeas');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('dimacserr3');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('op_a');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('op_at');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('makefill');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('op_o');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('addscaledmat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('zero_mat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('add_mat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('sym_mat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('make_i');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('copy_mat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_mult');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_multspa');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_multspb');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_multspc');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_mult_raw');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_mult_rawatlas');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('matvec');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('alloc_mat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('free_mat');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('initparams');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('initsoln');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('trans');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('chol_inv');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('chol');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('solvesys');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('user_exit');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('read_sol');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('read_prob');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('write_prob');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('write_sol');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('free_prob');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('easy_sdp');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('sci_easy_sdp');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('tweakgap');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('bisect_');
if bOK then
  ulink(ilib);
end
//
link(sdp_path + 'libsdp' + getdynlibext(), ['sdp','triu','store_packed','store_unpacked','alloc_mat_packed','free_mat_packed','structnnz','actnnz','bandwidth','qreig','sort_entries','norm2','norm1','norminf','Fnorm','Knorm','mat1norm','matinfnorm','calc_pobj','calc_dobj','trace_prod','linesearch','pinfeas','dinfeas','dimacserr3','op_a','op_at','makefill','op_o','addscaledmat','zero_mat','add_mat','sym_mat','make_i','copy_mat','mat_mult','mat_multspa','mat_multspb','mat_multspc','mat_mult_raw','mat_mult_rawatlas','matvec','alloc_mat','free_mat','initparams','initsoln','trans','chol_inv','chol','solvesys','user_exit','read_sol','read_prob','write_prob','write_sol','free_prob','easy_sdp','sci_easy_sdp','tweakgap','bisect_'],'c');
// remove temp. variables on stack
clear sdp_path;
clear bOK;
clear ilib;
// ----------------------------------------------------------------------------
