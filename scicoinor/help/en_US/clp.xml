<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="clp" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>clp</refname>

    <refpurpose>solve a linear programming problem</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>[xmin,fmin,status,extra] = clp(Q,c,A,lhs,rhs,lb,ub,btype,vartype,options)</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <para>Input parameters:</para>

    <variablelist>
      <varlistentry>
        <term>Q</term>

        <listitem>
          <para>a matrix (sparse or not) representing the quadratic part of
          the objective function. This parameters is optional.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>c</term>

        <listitem>
          <para>a vector representing the coefficients of the objective
          function.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>A</term>

        <listitem>
          <para>a matrix (sparse of not) representing the coefficients of the
          constraints.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>lhs</term>

        <listitem>
          <para>the left hand side column vector which containts the upper
          bounds of the constraints. This vector is optional.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>rhs</term>

        <listitem>
          <para>the right hand side column vector which containts the lower
          bounds of the constraints. This vector is optional.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>lb</term>

        <listitem>
          <para>the vector containing the lower bounds for the
          variables.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ub</term>

        <listitem>
          <para>the vector containing the upper bounds for the
          variables.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>btype</term>

        <listitem>
          <para>a string containing the type of bounds for the constraints. If
          there are N constraints, then btype must be of length N. The meaning
          of the characters are the following:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>'L'</emphasis> - smaller than - &lt;=</para>
            </listitem>

            <listitem>
              <para><emphasis>'E'</emphasis> - equality - =</para>
            </listitem>

            <listitem>
              <para><emphasis>'G'</emphasis> - greater than - &gt;=</para>
            </listitem>

            <listitem>
              <para><emphasis>'R'</emphasis> - Range - &lt;= + &gt;=</para>
            </listitem>

            <listitem>
              <para><emphasis>'N'</emphasis> - Free - no constraints.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>vartype</term>

        <listitem>
          <para>a string containing the type of variables. If there are N
          variables, then btype must be of length N. This parameters is
          optional and is here for compatibility with cbc.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>options</term>

        <listitem>
          <para>a parameters list (which is initialized via
          init_param).</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Output parameters</para>

    <variablelist>
      <varlistentry>
        <term>xmin</term>

        <listitem>
          <para>the solution found by clp.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>fmin</term>

        <listitem>
          <para>the value of the objective function.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>status</term>

        <listitem>
          <para>an integer which gives informations related to the termination
          of the solver:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>-1</emphasis> - unknown e.g. before solve or if
              postSolve says not optimal</para>
            </listitem>

            <listitem>
              <para><emphasis>0</emphasis> - optimal</para>
            </listitem>

            <listitem>
              <para><emphasis>1</emphasis> - primal infeasible</para>
            </listitem>

            <listitem>
              <para><emphasis>2</emphasis> - dual infeasible</para>
            </listitem>

            <listitem>
              <para><emphasis>3</emphasis> - stopped on iterations or
              time</para>
            </listitem>

            <listitem>
              <para><emphasis>4</emphasis> - stopped due to errors</para>
            </listitem>

            <listitem>
              <para><emphasis>5</emphasis> - stopped by event handler (virtual
              int ClpEventHandler::event())</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>extra</term>

        <listitem>
          <para>a parameter list which gather some more informations related
          to the state of the solver.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The parameters used by the clp 'options' input structure are the
    following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>maxnumiterations</emphasis> the maximum number of
        iterations to perform.</para>
      </listitem>

      <listitem>
        <para><emphasis>maxnumseconds</emphasis> the maximum time dedicated to
        the solver.</para>
      </listitem>

      <listitem>
        <para><emphasis>primaltolerance</emphasis> primal tolerance to
        use.</para>
      </listitem>

      <listitem>
        <para><emphasis>dualtolerance</emphasis> dual tolerance to use</para>
      </listitem>

      <listitem>
        <para><emphasis>verbose</emphasis> Amount of print out:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>0</emphasis> - none</para>
          </listitem>

          <listitem>
            <para><emphasis>1</emphasis> - just final</para>
          </listitem>

          <listitem>
            <para><emphasis>2 </emphasis>- just factorizations</para>
          </listitem>

          <listitem>
            <para><emphasis>3</emphasis> - as 2 plus a bit more</para>
          </listitem>

          <listitem>
            <para><emphasis>4</emphasis> - verbose above that 8,16,32 etc just
            for selective debug.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>solver</emphasis> the type of method to use to solve
        the linear problem:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>1</emphasis> - simplex primal</para>
          </listitem>

          <listitem>
            <para><emphasis>2</emphasis> - simplex dual</para>
          </listitem>

          <listitem>
            <para><emphasis>3</emphasis> - barrier</para>
          </listitem>

          <listitem>
            <para><emphasis>4</emphasis> - barrier no cross</para>
          </listitem>

          <listitem>
            <para>5 - reduced gradient</para>
          </listitem>

          <listitem>
            <para><emphasis>6</emphasis> - interior points</para>
          </listitem>

          <listitem>
            <para><emphasis>7</emphasis> - pdco</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>optim_dir</emphasis> the direction of
        optimization:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>1</emphasis> - minimize (default)</para>
          </listitem>

          <listitem>
            <para><emphasis>-1</emphasis> - maximize</para>
          </listitem>

          <listitem>
            <para><emphasis>0</emphasis> - ignore</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>writemps</emphasis> a string containing the file name
        of the mps file to write. This mps file while contains the current
        problem in MPS format.</para>
      </listitem>

      <listitem>
        <para><emphasis>perturb</emphasis> Perturbation:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>-50</emphasis> to <emphasis>+50</emphasis> -
            perturb by this power of ten (-6 sounds good)</para>
          </listitem>

          <listitem>
            <para><emphasis>100</emphasis> - auto perturb if takes too long
            (1.0e-6 largest nonzero)</para>
          </listitem>

          <listitem>
            <para><emphasis>101</emphasis> - we are perturbed</para>
          </listitem>

          <listitem>
            <para><emphasis>102</emphasis> - don't try perturbing again
            default is 100.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>scaling</emphasis> sets or unsets scaling:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>0</emphasis> - off</para>
          </listitem>

          <listitem>
            <para><emphasis>1</emphasis> - equilibrium</para>
          </listitem>

          <listitem>
            <para><emphasis>2</emphasis> - geometric</para>
          </listitem>

          <listitem>
            <para><emphasis>3</emphasis> - auto</para>
          </listitem>

          <listitem>
            <para><emphasis>4</emphasis> -
            auto-but-as-initialSolve-in-bab.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>fact_freq basis matrix factorization frequency. The default is
        to refactor every 200 iterations, but it may make more sense to use
        something such as 100 + the number of rows divided by 50.</para>
      </listitem>

      <listitem>
        <para><emphasis>presolve</emphasis> type of presolve method to
        use:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>1</emphasis> - initial</para>
          </listitem>

          <listitem>
            <para><emphasis>2</emphasis> - dual</para>
          </listitem>

          <listitem>
            <para><emphasis>3</emphasis> - primal</para>
          </listitem>

          <listitem>
            <para><emphasis>4</emphasis> - barrier</para>
          </listitem>

          <listitem>
            <para><emphasis>5</emphasis> - barrier no cross</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>red_grad</emphasis> Solves non-linear using reduced
        gradient</para>
      </listitem>

      <listitem>
        <para><emphasis>maxnumiterationshotstart</emphasis> The maximum number
        of iterations Clp can execute in hotstart before terminating.</para>
      </listitem>

      <listitem>
        <para><emphasis>dualobjectivelimit</emphasis> dual objective
        limit.</para>
      </listitem>

      <listitem>
        <para><emphasis>primalobjectivelimit</emphasis> primal objective
        limit.</para>
      </listitem>

      <listitem>
        <para><emphasis>objoffset</emphasis> offset to add to the objective
        function.</para>
      </listitem>

      <listitem>
        <para><emphasis>presolvetolerance</emphasis> presolve tolerance to
        use.</para>
      </listitem>

      <listitem>
        <para><emphasis>maximumbarrieriterations</emphasis> maximum number of
        iterations for the barrier method.</para>
      </listitem>
    </itemizedlist>

    <para>The parameters used by the clp 'extra' output structure are the
    following:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>lambda</emphasis> the Lagrangian coefficients of the
        problem.</para>
      </listitem>

      <listitem>
        <para><emphasis>secondary_status</emphasis> an integer which gives
        more informations on the state of the solver:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>0</emphasis> - none</para>
          </listitem>

          <listitem>
            <para><emphasis>1</emphasis> - primal infeasible because dual
            limit reached OR probably primal infeasible but can't prove it
            (main status 4)</para>
          </listitem>

          <listitem>
            <para><emphasis>2</emphasis> - scaled problem optimal - unscaled
            problem has primal infeasibilities</para>
          </listitem>

          <listitem>
            <para><emphasis>3</emphasis> - scaled problem optimal - unscaled
            problem has dual infeasibilities</para>
          </listitem>

          <listitem>
            <para><emphasis>4</emphasis> - scaled problem optimal - unscaled
            problem has primal and dual infeasibilities</para>
          </listitem>

          <listitem>
            <para><emphasis>5</emphasis> - giving up in primal with flagged
            variables</para>
          </listitem>

          <listitem>
            <para><emphasis>6</emphasis> - failed due to empty problem
            check</para>
          </listitem>

          <listitem>
            <para><emphasis>7</emphasis> - postSolve says not optimal</para>
          </listitem>

          <listitem>
            <para><emphasis>8</emphasis> - failed due to bad element
            check</para>
          </listitem>

          <listitem>
            <para>9 - status was 3 and stopped on time</para>
          </listitem>

          <listitem>
            <para>100 up - translation of enum from ClpEventHandler</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>clp_status</emphasis> an array of bits which gives
        informations of the state of the solution:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>bit 1</emphasis>: the solver has quit
            prematurly</para>
          </listitem>

          <listitem>
            <para><emphasis>bit 2</emphasis>: the solution has been proven
            optimal</para>
          </listitem>

          <listitem>
            <para><emphasis>bit 3</emphasis>: the solution has been proven
            primal infeasible</para>
          </listitem>

          <listitem>
            <para><emphasis>bit 4</emphasis>: the solution has been proven
            dual infeasible</para>
          </listitem>

          <listitem>
            <para><emphasis>bit 5</emphasis>: the primal objective limit has
            been reached</para>
          </listitem>

          <listitem>
            <para><emphasis>bit 6</emphasis>: the dual objective limit has
            been reached</para>
          </listitem>

          <listitem>
            <para><emphasis>bit 7</emphasis>: the iteration limit has been
            reached</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>Solve the following linear programming problem:</para>

    <latex style="display" align="center"><![CDATA[ 
\begin{eqnarray}
\mbox{min} & c^{t}\cdot x & \\
\mbox{subject to} & A_{1}\cdot x=b_{1} & \\
 & A_{2}\cdot x\leq b_{2} & \\
\mbox{and} & x_{i}^{\mbox{min}}\leq x_{i}\leq x_{i}^{\mbox{max}} & i=1,\cdots,n
\end{eqnarray}
]]></latex>

    <para>This tool is based on the CLP solver (see <ulink url="http://www.coin-or.org">http://www.coin-or.org</ulink> -
    clp project). It supports sparse matrix for the constraints and can use
    several solver to find a solution to the linear program: simplex, interior
    point, etc ...</para>
  </refsection>

  <refsection>
    <title>Example</title>

    <programlisting role="example"><![CDATA[ 
c = [10, 6, 4];
a = [1,  1, 1;...
     10, 4, 5;...
     2,  2, 6];
b = [100,600,300]';
lb    = [0,0,0];
ub    = [100,100,100];
vartype = 'CCC'; // Continuous variables
constrtype = 'LLL'; // Upper bounds

param = init_param();
param = add_param(param,'maxnumiterations',10000);
param = add_param(param,'maxnumseconds',10000);
param = add_param(param,'primaltolerance',1e-7);
param = add_param(param,'dualtolerance',1e-7);
param = add_param(param,'verbose',1);
param = add_param(param,'solver',1); // 3 interior - other simplex
param = add_param(param,'optim_dir', 1); // optimisation direction: 1 - minimize, -1 - maximize, 0 - ignore

[xmin,lambda,status] = clp([],c,a,b,b,lb,ub,constrtype,vartype,param);

printf('solution found: \n');disp(xmin);
printf('status = %d\n',status); disp(lambda);

printf('status of problem: %d\n', status);
printf(' - -1 - unknown e.g. before solve or if postSolve says not optimal\n');
printf(' -  0 - optimal\n');
printf(' -  1 - primal infeasible\n');
printf(' -  2 - dual infeasible\n');
printf(' -  3 - stopped on iterations or time\n');
printf(' -  4 - stopped due to errors\n');
printf(' -  5 - stopped by event handler (virtual int ClpEventHandler::event())\n');

printf('Secondary status of problem - may get extended: %d \n', extra('secondary_status'));
printf(' - 0 - none \n');
printf(' - 1 - primal infeasible because dual limit reached OR probably primal infeasible but can''t prove it (main status 4)\n');
printf(' - 2 - scaled problem optimal - unscaled problem has primal infeasibilities\n');
printf(' - 3 - scaled problem optimal - unscaled problem has dual infeasibilities\n');
printf(' - 4 - scaled problem optimal - unscaled problem has primal and dual infeasibilities\n');
printf(' - 5 - giving up in primal with flagged variables\n');
printf(' - 6 - failed due to empty problem check\n');
printf(' - 7 - postSolve says not optimal\n');
printf(' - 8 - failed due to bad element check\n');
printf(' - 9 - status was 3 and stopped on time \n');
printf(' - 100 up - translation of enum from ClpEventHandler.\n');

printf('clp_status: %s\n', dec2bin(extra('clp_status')));
printf(' - bit 1: isAbandoned\n');
printf(' - bit 2: isProvenOptimal\n');
printf(' - bit 3: isProvenPrimalInfeasible\n');
printf(' - bit 4: isProvenDualInfeasible\n');
printf(' - bit 5: isPrimalObjectiveLimitReached\n');
printf(' - bit 6: isDualObjectiveLimitReached\n');
printf(' - bit 7: isIterationLimitReached\n');
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="optim_slp">optim_slp</link></member>

      <member><link linkend="bonmin">bonmin</link></member>

      <member><link linkend="ipopt">ipopt</link></member>

      <member><link linkend="cbc">cbc</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <simplelist type="vert">
      <member>Yann COLLETTE</member>
    </simplelist>
  </refsection>
</refentry>
