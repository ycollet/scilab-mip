/*  File verifSolve.edp  August 4, 1998, O. Pironneau
	The object os to verify that PDEs are correctly solved by "solve" 
	An analytical solution ue() is chosen and compared with the numerical
	results for 2 triangulations. All the coefficients of the PDE are non 0
*/

wait := 0;				// no waiting-clicking between graphics
R2(x,y);  				// optional x,y is default name.(may prefer r, theta..))
pi := 4*atan(1); 		// optional, pi is predeclared

print("FIRST_EXAMPLE");
border aa(t=0,1){ x=t; y=0};	// the unit square
border bb(t=0,1){ x=1; y=t};
border cc(t=1,0){ x=t; y=1};
border dd(t=1,0){ x=0; y=t};
n:=20;
mesh th= buildmesh(aa(n)+bb(n)+cc(n)+dd(n));


solve(u){					
	pde(u)  - laplace(u)  = 0;
		on(aa,cc) u =x;
		on(bb) dnu(u) = 1;
		on(dd) dnu(u) = -1;
};

wait:=1;
print("Computed_solution:_click_mouse_in_graphic_window");
plot(u);
print("Error");
plot((u-x));
wait:=0;

print("SECOND_EXAMPLE");

border a(t=0,pi*2){ x = 3*cos(t); y = 2*sin(t)};	// boundary definition:e llipse
border b(t=0,2*pi){ x = cos(t);  y = sin(t) };		// boundary def: circle
mesh th1 = buildmesh(a(80) + b(-40)) ; 				// domain is on left of a and right of b
 
solve(u){					
	pde(u)  - laplace(u)  = 0;
		on(a) u =x;
		on(b) dnu(u) = -x;
};
wait:=1;
print("Computed_solution");
plot(u);
print("Error_plot");
plot((u-x));
wait:=0;

print("THIRD_EXAMPLE");
visc := 2.2; 			// coef of PDE, taken as constants
dis  := 3.3; 
rob  :=  1.1;
aa   :=  1.3;			
vxx  :=  1;
vyy  :=  2;
vxy  :=  3;
vyx  :=  4;
nnx() = -x;											// component of normal to border b
nny() = -y;
ue()= sin(x+y);										// analytical solution
dxue() = cos(x+y);									// x derivative of ue

dnuue()=dxue()*(visc*(nnx+nny) + (vxy+vxx)*nnx + (vyx+vyy)*nny);
neu() = ue()*rob+dnuue();
rhs() = dis*ue + ue * (2 * visc + vxx + vyy +vxy + vyx) + aa * cos(x+y);

solve(th1,u) {
	pde(u) u*dis + dx(u)*aa - laplace(u)*visc 
		-dxx(u)*vxx-dyy(u)*vyy-dxy(u)*vxy-dyx(u)*vyx = rhs;
	on(a)  u=ue;
	on(b) dnu(u) + u*rob = neu
	};

wait := 1;
plot(u);
plot(th1,u-ue);
print( int(th1)((u-ue)^2));

mesh th2 = buildmesh(a(160) + b(-80)) ;

solve(th2,v) {
	pde(v) v*dis + dx(v)*aa - laplace(v)*visc 
		-dxx(v)*vxx-dyy(v)*vyy-dxy(v)*vxy-dyx(v)*vyx = rhs;
	on(a)  v=ue;
	on(b) dnu(v) + v*rob = neu
	};
plot(v-ue);
print( int(th2)((v-ue)^2));
plot(v);
