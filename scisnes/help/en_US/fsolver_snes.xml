<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Yann COLLETTE
 * Christopher MAES
 * Copyright 2009
 * 
 * This file is released into the public domain
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="fsolver_snes" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate: 2009-06-21 $</pubdate>
  </info>

  <refnamediv>
    <refname>fsolver_snes</refname>

    <refpurpose>Solve a system of nonlinear equations using the Petsc / SNES
    solver</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>[x,status] = fsolver_snes(userfun,x0,options)</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>userfun</term>

        <listitem>
          <para>A user-supplied Scilab function that evaluates the system of
          equations at a given x. The userfun should be in the form <literal>f
          = userfun(x)</literal> or <literal>[f,J] =
          userfun(x)</literal></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>x0</term>

        <listitem>
          <para>An initial guess of the solution of the system of equations.
          With <literal>size(x0) = [n 1]</literal></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>options</term>

        <listitem>
          <para>A parameter list the specifies options for the
          algorithm.</para>

          <variablelist>
            <varlistentry>
              <term>'snes_type'</term>

              <listitem>
                <para>Sets the method for the nonlinear solver. Can be:</para>

                <itemizedlist>
                  <listitem>
                    <para>'ls': Newton's method with line search (systems of
                    nonlinear equations)</para>
                  </listitem>

                  <listitem>
                    <para>'tr': Newton's method with trust region (systems of
                    nonlinear equations)</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_tr_tol'</term>

              <listitem>
                <para>Sets the trust region parameter tolerance.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ls_type'</term>

              <listitem>
                <para>Sets the line search routine to be used by the method
                'snes_type'. Can be:</para>

                <itemizedlist>
                  <listitem>
                    <para>1: cubic line search (default)</para>
                  </listitem>

                  <listitem>
                    <para>2: quadratic line search</para>
                  </listitem>

                  <listitem>
                    <para>3: the full Newton step (actually not a line
                    search)</para>
                  </listitem>

                  <listitem>
                    <para>4: the full Newton step (calculating no norms;
                    faster in parallel)</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ls_set_alpha'</term>

              <listitem>
                <para>The scalar such that .5*f_{n+1} . f_{n+1} &lt;= .5*f_n .
                f_n - alpha |f_n . J . f_n|</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ls_set_maxstep'</term>

              <listitem>
                <para>The maximum norm of the update vector</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ls_steptol'</term>

              <listitem>
                <para>The minimum norm fraction of the original step after
                scaling (only available in Petsc-3.x)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_max_nl_step_fail'</term>

              <listitem>
                <para>Sets the maximum number of unsuccessful steps attempted
                by the nonlinear solver before it gives up.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_max_lin_solve_fail'</term>

              <listitem>
                <para>The number of failed linear solve attempts allowed
                before SNES returns with a diverged reason of
                SNES_DIVERGED_LINEAR_SOLVE .</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_lag_precond'</term>

              <listitem>
                <para>Determines when the preconditioner is rebuilt in the
                nonlinear solve. Only available in Petsc-3.x. Can be:</para>

                <itemizedlist>
                  <listitem>
                    <para>-1 indicates NEVER rebuild,</para>
                  </listitem>

                  <listitem>
                    <para>1 means rebuild every time the Jacobian is computed
                    within a single nonlinear solve,</para>
                  </listitem>

                  <listitem>
                    <para>2 means every second time the Jacobian is built
                    etc,</para>
                  </listitem>

                  <listitem>
                    <para>-2 indicates rebuild preconditioner at next chance
                    but then never rebuild after that .</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_lag_jac'</term>

              <listitem>
                <para>Determines when the Jacobian is rebuilt in the nonlinear
                solve. Only available in Petsc-3.x. Can be:</para>

                <itemizedlist>
                  <listitem>
                    <para>-1 indicates NEVER rebuild,</para>
                  </listitem>

                  <listitem>
                    <para>1 means rebuild every time the Jacobian is computed
                    within a single nonlinear solve,</para>
                  </listitem>

                  <listitem>
                    <para>2 means every second time the Jacobian is built
                    etc,</para>
                  </listitem>

                  <listitem>
                    <para>-2 means rebuild at next chance but then never
                    again.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ksp_type'</term>

              <listitem>
                <para>Set the resolution method of the linear solver. Can
                be:</para>

                <itemizedlist>
                  <listitem>
                    <para>'richardson': The preconditioned Richardson
                    iterative method.</para>
                  </listitem>

                  <listitem>
                    <para>'chebychev': The preconditioned Chebychev iterative
                    method.</para>
                  </listitem>

                  <listitem>
                    <para>'cg': The preconditioned conjugate gradient (PCG)
                    iterative method.</para>
                  </listitem>

                  <listitem>
                    <para>'cgne': Applies the preconditioned conjugate
                    gradient method to the normal equations without explicitly
                    forming A^t*A.</para>
                  </listitem>

                  <listitem>
                    <para>'nash': Code to run conjugate gradient method
                    subject to a constraint on the solution norm. This is used
                    in Trust Region methods for nonlinear equations.</para>
                  </listitem>

                  <listitem>
                    <para>'stcg': Code to run conjugate gradient method
                    subject to a constraint on the solution norm. This is used
                    in Trust Region methods for nonlinear equations.</para>
                  </listitem>

                  <listitem>
                    <para>'gltr': Code to run conjugate gradient method
                    subject to a constraint on the solution norm. This is used
                    in Trust Region methods for nonlinear equations.</para>
                  </listitem>

                  <listitem>
                    <para>'gmres': the Generalized Minimal Residual method.
                    (Saad and Schultz, 1986) with restart.</para>
                  </listitem>

                  <listitem>
                    <para>'fgmres': the Flexible Generalized Minimal Residual
                    method. developed by Saad with restart.</para>
                  </listitem>

                  <listitem>
                    <para>'lgmres': Augments the standard GMRES approximation
                    space with approximations to the error from previous
                    restart cycles.</para>
                  </listitem>

                  <listitem>
                    <para>'tcqmr': A variant of QMR (quasi minimal residual)
                    developed by Tony Chan.</para>
                  </listitem>

                  <listitem>
                    <para>'bcgs': The BiCGStab (Stabilized version of
                    BiConjugate Gradient Squared) method.</para>
                  </listitem>

                  <listitem>
                    <para>'ibcgs': The IBiCGStab (Improved Stabilized version
                    of BiConjugate Gradient Squared) method in an alternative
                    form to have only a single global reduction operation
                    instead of the usual 3 (or 4)</para>
                  </listitem>

                  <listitem>
                    <para>'bcgsl': Implements a slight variant of the Enhanced
                    BiCGStab(L) algorithm in (1) and (2).</para>

                    <para>The variation concerns cases when either kappa0**2
                    or kappa1**2 is negative due to round-off. Kappa0 has also
                    been pulled out of the denominator in the formula for
                    that.</para>

                    <para>References:</para>

                    <orderedlist>
                      <listitem>
                        <para>G.L.G. Sleijpen, H.A. van der Vorst, "An
                        overview of approaches for the stable computation of
                        hybrid BiCG methods", Applied Numerical Mathematics:
                        Transactions f IMACS, 19(3), pp 235-54, 1996.</para>
                      </listitem>

                      <listitem>
                        <para>G.L.G. Sleijpen, H.A. van der Vorst, D.R.
                        Fokkema, "BiCGStab(L) and other hybrid Bi-CG methods",
                        Numerical Algorithms, 7, pp 75-109, 1994. 3. D.R.
                        Fokkema, "Enhanced implementation of BiCGStab(L) for
                        solving linear systems of equations", preprint from
                        www.citeseer.com.</para>
                      </listitem>
                    </orderedlist>
                  </listitem>

                  <listitem>
                    <para>'cgs': The CGS (Conjugate Gradient Squared)
                    method.</para>
                  </listitem>

                  <listitem>
                    <para>'tfqmr': A transpose free QMR (quasi minimal
                    residual),</para>
                  </listitem>

                  <listitem>
                    <para>'cr': The (preconditioned) conjugate residuals
                    method</para>
                  </listitem>

                  <listitem>
                    <para>'lsqr':</para>

                    <para>Notes: This algorithm DOES NOT use a preconditioner.
                    It ignores any preconditioner arguments specified.</para>

                    <para>Reference:</para>

                    <orderedlist>
                      <listitem>
                        <para>Paige and Saunders, ACM Transactions on
                        Mathematical Software, Vol 8, pp 43-71, 1982</para>
                      </listitem>
                    </orderedlist>
                  </listitem>

                  <listitem>
                    <para>'preonly': This implements a stub method that
                    applies ONLY the preconditioner.</para>

                    <para>This may be used in inner iterations, where it is
                    desired to allow multiple iterations as well as the
                    "0-iteration" case. It is commonly used with the direct
                    solver preconditioners like 'lu' and 'cholesky'.</para>
                  </listitem>

                  <listitem>
                    <para>'qcg': Code to run conjugate gradient method subject
                    to a constraint on the solution norm. This is used in
                    Trust Region methods for nonlinear equations.</para>
                  </listitem>

                  <listitem>
                    <para>'bicg': Implements the Biconjugate gradient method
                    (similar to running the conjugate gradient on the normal
                    equations).</para>
                  </listitem>

                  <listitem>
                    <para>'minres': The MINRES (Minimum Residual)
                    method.</para>
                  </listitem>

                  <listitem>
                    <para>'symmlq': The SYMMLQ method.</para>

                    <para>Reference:</para>

                    <orderedlist>
                      <listitem>
                        <para>Paige &amp; Saunders, 1975.</para>
                      </listitem>
                    </orderedlist>
                  </listitem>

                  <listitem>
                    <para>'lcd':The LCD (left conjugate direction) method in
                    PETSc.</para>

                    <para>Reference:</para>

                    <orderedlist>
                      <listitem>
                        <para>J.Y. Yuan, G.H.Golub, R.J. Plemmons, and W.A.G.
                        Cecilio. Semiconjugate direction methods for real
                        positive definite system. BIT Numerical Mathematics,
                        44(1):189-207,2004.</para>
                      </listitem>

                      <listitem>
                        <para>Y. Dai and J.Y. Yuan. Study on semi-conjugate
                        direction methods for non-symmetric systems.
                        International Journal for Numerical Methods in
                        Engineering, 60:1383-1399,2004.</para>
                      </listitem>

                      <listitem>
                        <para>L. Catabriga, A.L.G.A. Coutinho, and L.P.Franca.
                        Evaluating the LCD algorithm for solving linear
                        systems of equations arising from implicit SUPG
                        formulation of compressible flows. International
                        Journal for Numerical Methods in Engineering,
                        60:1513-1534, 2004</para>
                      </listitem>

                      <listitem>
                        <para>L. Catabriga, A. M. P. Valli, B. Z. Melotti, L.
                        M. Pessoa, A. L. G. A. Coutinho, Performance of LCD
                        iterative method in the finite element and finite
                        difference solution of convection-diffusion equations,
                        Communications in Numerical Methods in Engineering,
                        (Early View).</para>
                      </listitem>
                    </orderedlist>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_pc_type'</term>

              <listitem>
                <para>Set the preconditionner type associated to the solver.
                Can be:</para>

                <itemizedlist>
                  <listitem>
                    <para>'none' - This is used when you wish to employ a
                    nonpreconditioned Krylov method.</para>
                  </listitem>

                  <listitem>
                    <para>'jacobi' - Jacobi (i.e. diagonal scaling
                    preconditioning).</para>
                  </listitem>

                  <listitem>
                    <para>'sor' - (S)SOR (successive over relaxation,
                    Gauss-Seidel) preconditioning.</para>
                  </listitem>

                  <listitem>
                    <para>'lu' - Uses a direct solver, based on LU
                    factorization, as a preconditioner.</para>
                  </listitem>

                  <listitem>
                    <para>'bjacobi' - Use block Jacobi preconditioning, each
                    block is (approximately) solved with its own KSP
                    object.</para>
                  </listitem>

                  <listitem>
                    <para>'eisenstat' - An implementation of SSOR (symmetric
                    successive over relaxation, symmetric Gauss-Seidel)
                    preconditioning that incorporates Eisenstat's trick to
                    reduce the amount of computation needed.</para>
                  </listitem>

                  <listitem>
                    <para>'ilu' - Incomplete factorization
                    preconditioners.</para>
                  </listitem>

                  <listitem>
                    <para>'icc' - Incomplete Cholesky factorization
                    preconditioners.</para>
                  </listitem>

                  <listitem>
                    <para>'asm' - Use the (restricted) additive Schwarz
                    method, each block is (approximately) solved with its own
                    KSP object.</para>
                  </listitem>

                  <listitem>
                    <para>'spai' - Use the Sparse Approximate Inverse method
                    of Grote and Barnard as a preconditioner (SIAM J. Sci.
                    Comput.; vol 18, nr 3).</para>
                  </listitem>

                  <listitem>
                    <para>'nn' - Balancing Neumann-Neumann for scalar elliptic
                    PDEs.</para>
                  </listitem>

                  <listitem>
                    <para>'cholesky' - Uses a direct solver, based on Cholesky
                    factorization, as a preconditioner.</para>
                  </listitem>

                  <listitem>
                    <para>'prometheus' - Prometheus (i.e. diagonal scaling
                    preconditioning).</para>
                  </listitem>

                  <listitem>
                    <para>'openmp' - Runs a preconditioner for a single
                    process matrix across several MPI processes.</para>
                  </listitem>

                  <listitem>
                    <para>'supportgraph' - SupportGraph (i.e. diagonal scaling
                    preconditioning).</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ksp_rtol'</term>

              <listitem>
                <para>the relative convergence tolerance (relative decrease in
                the residual norm).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ksp_abstol'</term>

              <listitem>
                <para>the absolute convergence tolerance (absolute size of the
                residual norm).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ksp_dtol'</term>

              <listitem>
                <para>the divergence tolerance (amount residual can increase
                before KSPDefaultConverged() concludes that the method is
                diverging).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ksp_maxits'</term>

              <listitem>
                <para>maximum number of iterations to use.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_rtol'</term>

              <listitem>
                <para>relative convergence tolerance.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_abstol'</term>

              <listitem>
                <para>absolute convergence tolerance.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_stol'</term>

              <listitem>
                <para>convergence tolerance in terms of the norm of the change
                in the solution between steps.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_maxit'</term>

              <listitem>
                <para>maximum number of iterations.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_maxf'</term>

              <listitem>
                <para>maximum number of function evaluations.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>'snes_ksp_comp_sing_val'</term>

              <listitem>
                <para>Sets a flag so that the extreme singular values will be
                calculated via a Lanczos or Arnoldi process as the linear
                system is solved.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>x</term>

        <listitem>
          <para>The computed solution to the system of equations.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>status</term>

        <listitem>
          <para>A parameter list that contains additional status information
          about the solve.</para>

          <variablelist>
            <varlistentry>
              <term>info_snes</term>

              <listitem>
                <para>The SNES statust return code.</para>

                <para>The method has converged:</para>

                <itemizedlist>
                  <listitem>
                    <para>2: SNES_CONVERGED_FNORM_ABS, ||F|| &lt; atol</para>
                  </listitem>

                  <listitem>
                    <para>3: SNES_CONVERGED_FNORM_RELATIVE, ||F|| &lt;
                    rtol*||F_initial||</para>
                  </listitem>

                  <listitem>
                    <para>4: SNES_CONVERGED_PNORM_RELATIVE, Newton computed
                    step size small; || delta x || &lt; tol</para>
                  </listitem>

                  <listitem>
                    <para>5: SNES_CONVERGED_ITS, maximum iterations
                    reached</para>
                  </listitem>

                  <listitem>
                    <para>7: SNES_CONVERGED_TR_DELTA.</para>
                  </listitem>
                </itemizedlist>

                <para>The method has diverged:</para>

                <itemizedlist>
                  <listitem>
                    <para>-1: SNES_DIVERGED_FUNCTION_DOMAIN,</para>
                  </listitem>

                  <listitem>
                    <para>-2: SNES_DIVERGED_FUNCTION_COUNT,</para>
                  </listitem>

                  <listitem>
                    <para>-3: SNES_DIVERGED_LINEAR_SOLVE,</para>
                  </listitem>

                  <listitem>
                    <para>-4: SNES_DIVERGED_FNORM_NAN,</para>
                  </listitem>

                  <listitem>
                    <para>-5: SNES_DIVERGED_MAX_IT, means that the solver
                    reached the maximum number of iterations without
                    satisfying any convergence criteria. SNES_CONVERGED_ITS
                    means that SNESSkipConverged() was chosen as the
                    convergence test; thus the usual convergence criteria have
                    not been checked and may or may not be satisfied.</para>
                  </listitem>

                  <listitem>
                    <para>-6: SNES_DIVERGED_LS_FAILURE,</para>
                  </listitem>

                  <listitem>
                    <para>-8: SNES_DIVERGED_LOCAL_MIN, || J^T b || is small,
                    implies converged to local minimum of F(). This can only
                    occur when using the line-search variant of SNES. The line
                    search wants to minimize: Q(alpha) = 1/2 || F(x + alpha s)
                    ||^2_2 this occurs at // Q'(alpha) = s^T F'(x+alpha s)^T
                    F(x+alpha s) = 0.</para>

                    <para>If s is the Newton direction - F'(x)^(-1)F(x) then
                    you get Q'(alpha) = -F(x)^T F'(x)^(-1)^T F'(x+alpha
                    s)F(x+alpha s); when alpha = 0 Q'(0) = - ||F(x)||^2_2
                    which is always NEGATIVE if F'(x) is invertible.</para>

                    <para>This means the Newton direction is a descent
                    direction and the line search should succeed if alpha is
                    small enough.</para>

                    <para>If F'(x) is NOT invertible AND F'(x)^T F(x) = 0 then
                    Q'(0) = 0 and the Newton direction is NOT a descent
                    direction so the line search will fail. All one can do at
                    this point is change the initial guess and try
                    again.</para>

                    <para>An alternative explanation:</para>

                    <para>Newton's method can be regarded as replacing the
                    function with its linear approximation and minimizing the
                    2-norm of that.</para>

                    <para>That is F(x+s) approx F(x) + F'(x)s so we minimize
                    || F(x) + F'(x) s ||^2_2; do this using Least
                    Squares.</para>

                    <para>If F'(x) is invertible then s = - F'(x)^(-1)F(x)
                    otherwise F'(x)^T F'(x) s = -F'(x)^T F(x).</para>

                    <para>If F'(x)^T F(x) is NOT zero then there exists a
                    nontrival (that is F'(x)s != 0) solution to the equation
                    and this direction is s = - [F'(x)^T F'(x)]^(-1) F'(x)^T
                    F(x) so Q'(0) = - F(x)^T F'(x) [F'(x)^T F'(x)]^(-T)
                    F'(x)^T</para>

                    <para>F(x) = - (F'(x)^T F(x)) [F'(x)^T F'(x)]^(-T)
                    (F'(x)^T F(x)).</para>

                    <para>Since we are assuming (F'(x)^T F(x)) != 0 and
                    F'(x)^T F'(x) has no negative eigenvalues Q'(0) &lt; 0 so
                    s is a descent direction and the line search should
                    succeed for small enough alpha.</para>

                    <para>Note that this RARELY happens in practice. Far more
                    likely the linear system is not being solved (well
                    enough?) or the Jacobian is wrong.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>info_ksp</term>

              <listitem>
                <para>The method has converged:</para>

                <itemizedlist>
                  <listitem>
                    <para>2: KSP_CONVERGED_RTOL: norm(r) &lt;=
                    rtol*norm(b)</para>
                  </listitem>

                  <listitem>
                    <para>3: KSP_CONVERGED_ATOL: norm(r) &lt;= atol</para>
                  </listitem>

                  <listitem>
                    <para>4: KSP_CONVERGED_ITS,</para>
                  </listitem>

                  <listitem>
                    <para>5: KSP_CONVERGED_CG_NEG_CURVE,</para>
                  </listitem>

                  <listitem>
                    <para>6: KSP_CONVERGED_CG_CONSTRAINED,</para>
                  </listitem>

                  <listitem>
                    <para>7: KSP_CONVERGED_STEP_LENGTH,</para>
                  </listitem>

                  <listitem>
                    <para>8: KSP_CONVERGED_HAPPY_BREAKDOWN,</para>
                  </listitem>
                </itemizedlist>

                <para>The method has diverged:</para>

                <itemizedlist>
                  <listitem>
                    <para>-2: KSP_DIVERGED_NULL,</para>
                  </listitem>

                  <listitem>
                    <para>-3: KSP_DIVERGED_ITS: Ran out of iterations before
                    any convergence criteria was reached.</para>
                  </listitem>

                  <listitem>
                    <para>-4: KSP_DIVERGED_DTOL: norm(r) &gt;=
                    dtol*norm(b)</para>
                  </listitem>

                  <listitem>
                    <para>-5: KSP_DIVERGED_BREAKDOWN: A breakdown in the
                    Krylov method was detected so the method could not
                    continue to enlarge the Krylov space.</para>
                  </listitem>

                  <listitem>
                    <para>-6: KSP_DIVERGED_BREAKDOWN_BICG: A breakdown in the
                    'bicg' method was detected so the method could not
                    continue to enlarge the Krylov space.</para>
                  </listitem>

                  <listitem>
                    <para>-7: KSP_DIVERGED_NONSYMMETRIC: It appears the
                    operator or preconditioner is not symmetric and this
                    Krylov method ('cg', 'minres', 'cr') requires
                    symmetry.</para>
                  </listitem>

                  <listitem>
                    <para>-8: KSP_DIVERGED_INDEFINITE_PC: It appears the
                    preconditioner is indefinite (has both positive and
                    negative eigenvalues) and this Krylov method ('cg')
                    requires it to be positive definite.</para>

                    <para>Notes: This can happen with the 'icc'
                    preconditioner, use -pc_factor_shift_positive_definite to
                    force the PCICC preconditioner to generate a positive
                    definite preconditioner.</para>
                  </listitem>

                  <listitem>
                    <para>-9: KSP_DIVERGED_NAN,</para>
                  </listitem>

                  <listitem>
                    <para>-10: KSP_DIVERGED_INDEFINITE_MAT,</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>its</term>

              <listitem>
                <para>The number of nonlinear iterations performed.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>lits</term>

              <listitem>
                <para>The number of linear iterations performed.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>fail_its</term>

              <listitem>
                <para>The number of failed nonlinear iterations
                performed.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>fail_lits</term>

              <listitem>
                <para>The number of failed linear iterations performed.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>fev</term>

              <listitem>
                <para>The number of function evaluations.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para><literal>fsolver_snes</literal> solves a system of nonlinear
    equations. The system must have <literal>n</literal> equations and
    <literal>n</literal> unknowns, and should be formulated in the form
    <literal>F(x) = 0</literal>, where where <literal>F</literal> is a
    nonlinear function, and <literal>x</literal> is a vector of size
    <literal>n</literal>.</para>

    <para>The user should supply a Scilab function <literal>userfun</literal>
    to <literal>fsolver_snes</literal> that computes the value of
    <literal>F</literal> at a given <literal>x</literal>.</para>

    <para>If analytical derivatives of <literal>F</literal> can be computed,
    these should also be supplied to <literal>fsolver_snes</literal>. The user
    should return these derivatives as a <literal>n x n</literal> Jacobian
    matrix, <literal>J</literal>, where the <literal>i,j</literal>th entry of
    J is the partial derivative of the <literal>i</literal>th component of
    <literal>F</literal> with respect to <literal>j</literal>th component of
    <literal>x</literal>, evaluated at the current point
    <literal>x</literal>.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <para>The following example shows the most basic use of
    <literal>fsolver_snes</literal>.</para>

    <para>Often, not all the components of <literal>x</literal> appear in
    every row of <literal>F</literal>. As a result the Jacobian matrix often
    has a large number of zero entries. In this case, it is far more efficent
    to provide a sparse representation of the Jacobian matrix to
    <literal>fsolver</literal>. The following example shows a function that
    constructs a sparse Jacobian matrix.</para>

    <programlisting role="example">
/////////////////////
// Test from Petsc //
/////////////////////

function [F,J] = petsc_pb_1(x)
  global jac_ev;
  jac_ev = jac_ev + 1;
  global fun_ev;
  fun_ev = fun_ev + 1;
  F(1,1) = sin(3.0*x(1)) + x(1);
  F(2,1) = x(2);
  J(1,1) = 3*cos(3*x(1)) + 1;
  J(1,2) = 0;
  J(2,1) = 0;
  J(2,2) = 1;
endfunction

////////////////////////////
// Set the solver options //
////////////////////////////

params_snes = init_param();
params_snes = add_param(params_snes,'snes_type', 'tr');
params_snes = add_param(params_snes,'snes_tr_tol', 0);

params_snes = add_param(params_snes, 'snes_pc_type', 'lu');

params_snes = add_param(params_snes,'snes_ksp_rtol',   1e-40);
params_snes = add_param(params_snes,'snes_ksp_abstol', 1e-40);
params_snes = add_param(params_snes,'snes_ksp_dtol',   1e6);
params_snes = add_param(params_snes,'snes_ksp_maxits', 100000);

params_snes = add_param(params_snes,'snes_ksp_comp_sing_val', 1);

params_snes = add_param(params_snes,'snes_rtol',   1e-40);
params_snes = add_param(params_snes,'snes_abstol', 1e-40);
params_snes = add_param(params_snes,'snes_stol',   1e-40);
params_snes = add_param(params_snes,'snes_maxit',  100);
params_snes = add_param(params_snes,'snes_maxf',   1000);

params_snes = add_param(params_snes,'snes_ksp_type','gmres');
params_snes = add_param(params_snes,'snes_ls_type', 1);

////////////////
// Resolution //
////////////////

x0 = [4;4].*rand(2,1) + [-2;-2];

// With analytical Jacobian and with fsolve
tic();
[x_opt, status] = fsolver_snes(petsc_pb_1,x0,params_snes);
t = toc();

printf('with Jacobian - result: \n');
printf('info_snes                      = %d\n', status('info_snes'));
printf('info_ksp                       = %d\n', status('info_ksp'));
printf('non linear iterations          = %d\n', status('its'));
printf('linear iterations              = %d\n', status('lits'));
printf('failed non linear iterations   = %d\n', status('fail_its'));
printf('failed linear iterations       = %d\n', status('fail_lits'));
printf('number of function evaluations = %d\n', status('fev'));
printf('elapsed time = %f\n' ,t);
    </programlisting>
  </refsection>

  <refsection>
    <title>Authors</title>

    <simplelist type="vert">
      <member>Christopher Maes</member>

      <member>Yann Collette</member>
    </simplelist>
  </refsection>
</refentry>
